%code requires {
  #include <memory>
  #include <string>
  #include "ast.hpp"
}

%{

#include <iostream>
#include <memory>
#include <string>
#include "ast.hpp"

// 声明 lexer 函数和错误处理函数
int yylex();
void yyerror(std::unique_ptr<BaseAST> &ast, const char *s);
using namespace std;

%}

// 定义 parser 函数和错误处理函数的附加参数
// 我们需要返回一个字符串作为 AST, 所以我们把附加参数定义成字符串的智能指针
// 解析完成后, 我们要手动修改这个参数, 把它设置成解析得到的字符串
%parse-param { std::unique_ptr<BaseAST> &ast }

// yylval 的定义, 我们把它定义成了一个联合体 (union)
// 因为 token 的值有的是字符串指针, 有的是整数
// 之前我们在 lexer 中用到的 str_val 和 int_val 就是在这里被定义的
// 至于为什么要用字符串指针而不直接用 string 或者 unique_ptr<string>?
// 请自行 STFW 在 union 里写一个带析构函数的类会出现什么情况
%union {
  std::string *str_val;
  int int_val;
  BaseAST *ast_val;
}

// lexer 返回的所有 token 种类的声明
// 注意 IDENT 和 INT_CONST 会返回 token 的值, 分别对应 str_val 和 int_val
%token INT RETURN LE GE EQ NE AND OR CONST
%token <str_val> IDENT
%token <int_val> INT_CONST

// 非终结符的类型定义
%type <ast_val> FuncDef FuncType Block Stmt Exp UnaryExp PrimaryExp UnaryOp AddExp MulExp LOrExp LAndExp EqExp RelExp ConstDecl Decl BType ConstDef ConstInitVal ConstExp BlockItem LVal
%type <int_val> Number

%%

Decl
  : ConstDecl {

  }
  ;

ConstDecl
  : CONST BType ConstDefs ';' {

  }
  ;



BType
  : INT {

  }
  ;

ConstDefs
  : ConstDef {

  }
  | ConstDefs ',' ConstDef {

  }
  ;

ConstDef
  : IDENT '=' ConstInitVal {

  }
  ;

ConstInitVal
  : ConstExp {

  }
  ;



CompUnit
  : FuncDef {
    auto comp_unit = make_unique<CompUnitAST>();
    comp_unit->func_def = unique_ptr<BaseAST>($1);
    ast = move(comp_unit);
  }
  ;

FuncDef
  : FuncType IDENT '(' ')' Block {
    auto ast = new FuncDefAST();
    ast->func_type = unique_ptr<BaseAST>($1);
    ast->ident = *unique_ptr<string>($2);
    ast->block = unique_ptr<BaseAST>($5);
    $$ = ast;
  }
  ;
// 同上, 不再解释
FuncType
  : INT {
    auto ast = new FuncTypeAST();
    ast->type = "i32";
    $$ = ast;
  }
  ;

Block
  : '{' BlockItems '}' {
    auto ast = new BlockAST();
    // ast->stmt = unique_ptr<BaseAST>($2);
    $$ = ast;
  }
  ;

BlockItems
  : BlockItem {
    std::cout << "BlockItem" << std::endl;
  }
  | BlockItems BlockItem {

  }
  ;

BlockItem
  : Decl {

  }
  | Stmt {

  }
  ;

LVal
  : IDENT {

  }
  ;

ConstExp
  : Exp {

  }
  ;

Stmt
  : RETURN Exp ';' {
    auto ast = new StmtAST();
    ast->exp = unique_ptr<BaseAST>($2);
    $$ = ast;
  }
  ;

Exp
  : LOrExp {
      auto ast = new ExpAST();
      ast->unary_exp = unique_ptr<BaseAST>($1);
      $$ = ast;
  }
  ;

LOrExp
  : LAndExp {
      auto ast = new LOrExpAST();
      ast->landexp = unique_ptr<BaseAST>($1);
      ast->type = LOrExpAST::LOrExpType::LANDEXP;
      $$ = ast;
  }
  | LOrExp OR LAndExp {
      auto ast = new LOrExpAST();
      ast->lorexp = unique_ptr<BaseAST>($1);
      ast->landexp = unique_ptr<BaseAST>($3);
      ast->type = LOrExpAST::LOrExpType::LOREXP_OR_LANDEXP;
      $$ = ast;
  }
  ;

LAndExp
  : EqExp {
      auto ast = new LAndExpAST();
      ast->eqexp = unique_ptr<BaseAST>($1);
      ast->type = LAndExpAST::LAndExpType::EQEXP;
      $$ = ast;
  }
  | LAndExp AND EqExp {
      auto ast = new LAndExpAST();
      ast->landexp = unique_ptr<BaseAST>($1);
      ast->eqexp = unique_ptr<BaseAST>($3);
      ast->type = LAndExpAST::LAndExpType::LANDEXP_AND_EQEXP;
      $$ = ast;
  }
  ;

EqExp
  : RelExp {
    auto ast = new EqExpAST();
    ast->relexp = unique_ptr<BaseAST>($1);
    ast->type = EqExpAST::EqExpType::RELEXP;
    $$ = ast;
  }
  | EqExp EQ RelExp {
    auto ast = new EqExpAST();
    ast->eqexp = unique_ptr<BaseAST>($1);
    ast->relexp = unique_ptr<BaseAST>($3);
    ast->type = EqExpAST::EqExpType::EQEXP_EQ_RELEXP;
    $$ = ast;
  }
  | EqExp NE RelExp {
    auto ast = new EqExpAST();
    ast->eqexp = unique_ptr<BaseAST>($1);
    ast->relexp = unique_ptr<BaseAST>($3);
    ast->type = EqExpAST::EqExpType::EQEXP_NE_RELEXP;
    $$ = ast;
  }
  ;

RelExp
  : AddExp {
    auto ast = new RelExpAST();
    ast->addexp = unique_ptr<BaseAST>($1);
    ast->type = RelExpAST::RelExpType::ADDEXP;
    $$ = ast;
  }
  | RelExp '<' AddExp {
    auto ast = new RelExpAST();
    ast->relexp = unique_ptr<BaseAST>($1);
    ast->addexp = unique_ptr<BaseAST>($3);
    ast->type = RelExpAST::RelExpType::RELEXP_LT_ADDEXP;
    $$ = ast;
  }
  | RelExp '>' AddExp {
    auto ast = new RelExpAST();
    ast->relexp = unique_ptr<BaseAST>($1);
    ast->addexp = unique_ptr<BaseAST>($3);
    ast->type = RelExpAST::RelExpType::RELEXP_GT_ADDEXP;
    $$ = ast;

  }
  | RelExp LE AddExp {
    auto ast = new RelExpAST();
    ast->relexp = unique_ptr<BaseAST>($1);
    ast->addexp = unique_ptr<BaseAST>($3);
    ast->type = RelExpAST::RelExpType::RELEXP_LE_ADDEXP;
    $$ = ast;

  }
  | RelExp GE AddExp {
    auto ast = new RelExpAST();
    ast->relexp = unique_ptr<BaseAST>($1);
    ast->addexp = unique_ptr<BaseAST>($3);
    ast->type = RelExpAST::RelExpType::RELEXP_GE_ADDEXP;
    $$ = ast;

  }
  ;

AddExp
  : MulExp {
    auto ast = new AddExpAST();
    ast->type = AddExpAST::AddExpType::MULEXP;
    ast->mulexp = unique_ptr<BaseAST>($1);
    $$ = ast;
  }
  | AddExp '+' MulExp {
    auto ast = new AddExpAST();
    ast->type = AddExpAST::AddExpType::ADDEXP_ADD_MULEXP;
    ast->addexp = unique_ptr<BaseAST>($1);
    ast->mulexp = unique_ptr<BaseAST>($3);
    $$ = ast;
  }
  | AddExp '-' MulExp {
    auto ast = new AddExpAST();
    ast->type = AddExpAST::AddExpType::ADDEXP_MINUS_MULEXP;
    ast->addexp = unique_ptr<BaseAST>($1);
    ast->mulexp = unique_ptr<BaseAST>($3);
    $$ = ast;
  }
  ;
MulExp
  : UnaryExp {
    auto ast = new MulExpAST();
    ast->type = MulExpAST::MultExpType::UNARYEXP;
    ast->unaryexp = unique_ptr<BaseAST>($1);
    $$ = ast;
  }
  | MulExp '*' UnaryExp {
    auto ast = new MulExpAST();
    ast->type = MulExpAST::MultExpType::MULEXP_MULT_UNARYEXP;
    ast->mulexp = unique_ptr<BaseAST>($1);
    ast->unaryexp = unique_ptr<BaseAST>($3);
    $$ = ast;
  }
  | MulExp '/' UnaryExp {
    auto ast = new MulExpAST();
    ast->type = MulExpAST::MultExpType::MULEXP_DIV_UNARYEXP;
    ast->mulexp = unique_ptr<BaseAST>($1);
    ast->unaryexp = unique_ptr<BaseAST>($3);
    $$ = ast;
  }
  | MulExp '%' UnaryExp {
    auto ast = new MulExpAST();
    ast->type = MulExpAST::MultExpType::MULEXP_MOD_UNARYEXP;
    ast->mulexp = unique_ptr<BaseAST>($1);
    ast->unaryexp = unique_ptr<BaseAST>($3);
    $$ = ast;
  }
  ;

UnaryExp
  : PrimaryExp {
      // std::cout << "(PrimaryExp): " << *(yylval.str_val) << std::endl;
      auto ast = new UnaryExpAST();
      ast->primary_exp = unique_ptr<BaseAST>($1);
      ast->type = UnaryExpAST::UnaryExpType::PRIMARY_EXP;
      $$ = ast;
  }
  | UnaryOp UnaryExp {
      // std::cout << "UnaryOp UnaryExp: " << *(yylval.str_val) << std::endl;
      auto ast = new UnaryExpAST();
      ast->type = UnaryExpAST::UnaryExpType::UNARYOP_UNARYEXP;
      ast->unary_op = unique_ptr<BaseAST>($1);
      ast->unary_exp = unique_ptr<BaseAST>($2);
      $$ = ast;
  }
  ;

PrimaryExp
  : '('Exp')' {
    // std::cout << "(Exp): " << *(yylval.str_val) << std::endl;
    auto ast = new PrimaryExpAST();
    // ast->type = PrimaryExpAST::PrimaryExpType::EXP;
    // ast->exp = unique_ptr<BaseAST>($2);
    $$ = ast;
  }
  | LVal {
    
  }
  | Number {
    auto ast = new PrimaryExpAST();
    ast->type = PrimaryExpAST::PrimaryExpType::NUMBER;
    ast->number = $1;
    $$ = ast;
  }
  ;

UnaryOp
  : '+' {
    // std::cout << "+: " << *(yylval.str_val) << std::endl;
    auto ast = new UnaryOpAST();
    ast->type = UnaryOpAST::UnaryOpType::ADD;
    $$ = ast;
  }
  | '-' {
    // std::cout << "-: " << *(yylval.str_val) << std::endl;
    auto ast = new UnaryOpAST();
    ast->type = UnaryOpAST::UnaryOpType::MINUS;
    $$ = ast;
  }
  | '!' {
    // std::cout << "!: " << *(yylval.str_val) << std::endl;
    auto ast = new UnaryOpAST();
    ast->type = UnaryOpAST::UnaryOpType::NEGATION;
    $$ = ast;
  }
  ;

Number
  : INT_CONST {
    $$ = $1;
  }
  ;

%%

// 定义错误处理函数, 其中第二个参数是错误信息
// parser 如果发生错误 (例如输入的程序出现了语法错误), 就会调用这个函数
void yyerror(std::unique_ptr<BaseAST> &ast, const char *s) {
  cerr << "error: " << s << endl;
}
